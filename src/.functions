function help                 # Show a list of functions
{
  echo "\n"
  echo ${BOLD} 'FUNCTIONS ===============================>'
  echo ${PINK}
  grep "^function" $HOME/.functions
  echo ${RESET}
  echo ${BOLD} 'ALIASES   ===============================>'
  echo ${YELLOW}
  grep "^alias" $HOME/.aliases
}

function gitignore            # Generate gitignore
{
  if [ $1 ]; then
    curl -sLw "\n" "https://www.gitignore.io/api/$1" -o .gitignore
  else
    echo "Usage: ${GREEN} gitignore ${RESET} [source]"
  fi
}

function bash-mail            # Interacts with Bash Mail in /var/mail
{
  local help="Usage: bash-mail ${YELLOW}[ open | check | clean ] ${RESET}"
  if [ $1 ]; then
    if [ $1 == 'open' ]; then
      code /var/mail/$USER
    elif [ $1 == 'check' ]; then
      cat /var/mail/$USER
    elif [ $1 == 'clean' ]; then
      sudo rm /var/mail/$USER
    else
      echo $help
    fi
  else
    echo $help
  fi
}

function node-create           # Start new node project
{
  local help="Usage: node-create ${YELLOW}[basic | express | koa | vue | nuxt | quasar| react ] ${PINK}[project-name] ${RESET}"
  if [ $2 ]; then
    if [ $1 == 'basic' ]; then
      mkdir $2
    elif [ $1 == 'express' ]; then
      npx express-generator $2 --no-view --es6
    elif [ $1 == 'feathers' ]; then
      npx @feathersjs/cli generate app
    elif [ $1 == 'vue' ]; then
      npx @vue/cli create $2
    elif [ $1 == 'quasar' ]; then
      npx @quasar/cli create $2
    elif [ $1 == 'react' ]; then
      npx create-react-app $2
    elif [ $1 == 'koa' ]; then
      npx koa-generator $2 --hbs --css stylus
    elif [ $1 == 'nuxt' ]; then
      npx create-nuxt-app $2
    else
      echo $help
      return
    fi
  else
    echo $help
    return
  fi
  cd $2
  npm init -y
  echo mit | gen-license
  gen-covgen
  gen-readme
  mkdir ".github"
  gen-contributing
  git init
  gen-repo
  gitignore node
  git add -A
  git commit -m 'Initial commit'
  code .
  # TODO: ask to generate gh repo
}

function github-create
{
  local repo_name="$1"
  local help="Usage: github-create ${YELLOW}[ repo-name ] ${RESET}"
  if [ -z "$repo_name" ]; then
    echo $help
    return
  fi
  read "otp?Enter your 2FA code: "
  local res=$(curl -u $GITHUB_USER https://api.github.com/user/repos -d "{\"name\":\"$repo_name\"}" --header "x-github-otp: $otp")
  local created=$(print $res | python -mjson.tool | grep created_at)
  if [ -z "$created" ]; then
    local message=$(printf $res | python -mjson.tool | grep message)
    echo "${RED}Error:${RESET} $message"
    return
  fi
  read "yn?Do you want to add this repo to your github remote? "
  if [ $yn == [Yy]* ]; then
    git remote add origin git@github.com:$GITHUB_USER/$repo_name.git
  fi
}

function gen-lint           # Generates Eslint config
{
  local help_message=(
    "\nAdd any linting files you would like to use as templates here"
    "\nand run ${YELLOW}gen-lint${RESET} to copy them into your current"
    "\nworking directory"
  )
  # TODO: specify custom plugins
  local node_modules=(
    eslint
    prettier
    eslint-config-prettier
    eslint-plugin-prettier
    stylelint
    husky
    lint-staged
  )
  if hash yarn 2>/dev/null; then
    yarn add --dev $node_modules
  else
    npm install --only=dev $node_modules
  fi
  # TODO: custom lint directory
  if [ -d $HOME/.templates/lint ]; then
    for file in $HOME/.templates/lint/.*; do
      # TODO: filter unwanted files (.git, .DS_Store, etc)
      [ -r "$file" ] && cp $file .
    done
    unset file
  else
    echo "\nCreating ${PINK}lint${RESET} directory in ${PINK}$HOME/.templates${RESET}"
    [ -d $HOME/.templates ] || mkdir $HOME/.templates
    mkdir $HOME/.templates/lint
    echo $help_message
  fi
}

function global-install     # Handles global node modules
{
  # TODO: add to 'global' function
  # TODO generate custom list of global modules
  local node_modules=(mocha generate-contributing generate-gh-repo generate-license @cloudflare/wrangler yarn npm)
  if [ $1 ] && [ $1 == 'yarn' ]; then
    echo "${YELLOW} yarn ${RESET} add -g ${PINK} $node_modules ${RESET}"
    yarn add -g $node_modules
  else
    echo "${YELLOW} npm ${RESET} install -g ${PINK} $node_modules ${RESET}"
    npm install -g $node_modules
  fi
}

function listening          # Check Ports
{
  if [ $# -eq 0 ]; then
    sudo lsof -iTCP -sTCP:LISTEN -n -P
  elif [ $# -eq 1 ]; then
    sudo lsof -iTCP -sTCP:LISTEN -n -P | grep -i --color $1
  else
    echo 'Usage: listening [pattern]'
  fi
}

function damn               # Reinstall node_modules
{
  # TODO: remove globals option
  if [ $1 ]; then
    if [ $1 == 'yarn' ]; then
      rm -rf node_modules
      yarn install
    elif [ $1 == 'npm' ]; then
      rm -rf node_modules
      npm install
    else
      echo "Usage: damn [${YELLOW} yarn ${RESET} | ${YELLOW} npm ${RESET}]"
    fi
  else
    if [ command -v yarn ]; then
      rm -rf node_modules
      yarn install
    else
      rm -rf node_modules
      npm install
    fi
  fi
}

function untrack            # Fix untracked files in git
{
  git rm -r --cached .
  git add .
  git commit -m 'fixed untracked files'
}

function sites              # cd to Sites directory
{
  # TODO: turn var into flag, add var for other project dirs
  if [ $1 ]; then
    cd $HOME/$1/Sites
  else
    cd $HOME/Sites
  fi
}

function global             # List global dependencies
{
  if [ $1 ]; then
    if [ $1 == 'yarn' ]; then
      yarn global list --depth=0
    elif [ $1 == 'npm' ]; then
      npm list -g --depth=0
    else
      echo "Usage: global [${YELLOW} yarn ${RESET} | ${YELLOW} npm ${RESET}]"
    fi
  else
    echo "Usage: global [${YELLOW} yarn ${RESET} | ${YELLOW} npm ${RESET}]"
  fi
}

function fromhex            # Converts hexadecimal color code to tput color index
{
  # TODO: add help
    hex=${1#"#"}
    r=$(printf '0x%0.2s' "$hex")
    g=$(printf '0x%0.2s' ${hex#??})
    b=$(printf '0x%0.2s' ${hex#????})
    printf '%03d' "$(( (r<75?0:(r-35)/40)*6*6 + 
                       (g<75?0:(g-35)/40)*6   +
                       (b<75?0:(b-35)/40)     + 16 ))"
}

function printenv-heroku    # Download environment variables from Heroku
{
  heroku config -s > .env
}

function upgrade            # Upgrades shell profiles to latest release
{
  if [ -f .oh-my-zsh/tools/upgrade.sh ]; then
    sh .oh-my-zsh/tools/upgrade.sh
  fi
}

function mkcd               # Make directory and immediately cd into it
{
  if [ ! -n "$1" ]; then
    echo "Usage: mkcd [directory-name]"
  elif [ -d $1 ]; then
    echo "\`$1' already exists"
  else
    mkdir $1 && cd $1
  fi
}