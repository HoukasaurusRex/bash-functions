function help                 # Show a list of functions
{
  echo "\n"
  echo ${BOLD} 'FUNCTIONS ===============================>'
  echo ${PINK}
  grep "^function" $HOME/.functions
  echo ${RESET}
  echo ${BOLD} 'ALIASES   ===============================>'
  echo ${YELLOW}
  grep "^alias" $HOME/.aliases
}

function gitignore            # Generate gitignore
{
  if [ $1 ]; then
    curl -sLw "\n" "https://www.gitignore.io/api/$1" -o .gitignore
  else
    echo "Usage: ${GREEN} gitignore ${RESET} [source]"
  fi
}

function node-create           # Start new node project
{
  if [ $2 ]; then
    if [ $1 == 'express' ]; then
      npx express-generator $2 --no-view
      npx eslint init
    elif [ $1 == 'vue' ]; then
      npx @vue/cli create $2
    elif [ $1 == 'quasar' ]; then
      npx @quasar/cli create $2
    elif [ $1 == 'react' ]; then
      npx create-react-app $2
    elif [ $1 == 'koa' ]; then
      npx koa-generator $2 --hbs --css stylus
      npx eslint init
    else
      echo "Usage: init ${GREEN} [express | koa | vue | quasar| react ] ${YELLOW} [project-name] ${RESET}"
      return
    fi
  else
    echo "Usage: init ${GREEN} [express | koa | vue | quasar| react ] ${YELLOW} [project-name] ${RESET}"
    return
  fi
  cd $2
  npm init -y
  gen-license
  gen-covgen
  gen-readme
  gen-contributing
  git init
  gitignore node
  git add -A
  git commit -m 'Initial commit'
  # TODO: ask to generate gh repo
}

function global-install
{
  # TODO: add to 'global' function
  local nodeModules=(generate-contributing generate-gh-repo generate-license yarn npm)
  if [ $1 ] && [ $1 == 'yarn' ]; then
    echo "${YELLOW} yarn ${RESET} add -g ${PINK} $nodeModules ${RESET}"
    yarn add -g $nodeModules
  else
    echo "${YELLOW} npm ${RESET} install -g ${PINK} $nodeModules ${RESET}"
    npm install -g $nodeModules
  fi
    
}

function listening          # Check Ports
{
  if [ $# -eq 0 ]; then
    sudo lsof -iTCP -sTCP:LISTEN -n -P
  elif [ $# -eq 1 ]; then
    sudo lsof -iTCP -sTCP:LISTEN -n -P | grep -i --color $1
  else
    echo 'Usage: listening [pattern]'
  fi
}

function damn               # Reinstall node_modules
{
  # TODO: remove globals option
  if [ $1 ]; then
    if [ $1 == 'yarn' ]; then
      rm -rf node_modules
      yarn install
    elif [ $1 == 'npm' ]; then
      rm -rf node_modules
      npm install
    else
      echo "Usage: damn [${YELLOW} yarn ${RESET} | ${YELLOW} npm ${RESET}]"
    fi
  else
    if [ command -v yarn ]; then
      rm -rf node_modules
      yarn install
    else
      rm -rf node_modules
      npm install
    fi
  fi
}

function untrack            # Fix untracked files in git
{
  git rm -r --cached .
  git add .
  git commit -m 'fixed untracked files'
}

function sites              # cd to Sites directory
{
  # TODO: turn var into flag, add var for other project dirs
  if [ $1 ]; then
    cd $HOME/$1/Sites
  else
    cd $HOME/Sites
  fi
}

function global             # List global dependencies
{
  if [ $1 ]; then
    if [ $1 == 'yarn' ]; then
      yarn global list --depth=0
    elif [ $1 == 'npm' ]; then
      npm list -g --depth=0
    else
      echo "Usage: global [${YELLOW} yarn ${RESET} | ${YELLOW} npm ${RESET}]"
    fi
  else
    echo "Usage: global [${YELLOW} yarn ${RESET} | ${YELLOW} npm ${RESET}]"
  fi
}

function fromhex            # Converts hexadecimal color code to tput color index
{
  # TODO: add help
    hex=${1#"#"}
    r=$(printf '0x%0.2s' "$hex")
    g=$(printf '0x%0.2s' ${hex#??})
    b=$(printf '0x%0.2s' ${hex#????})
    printf '%03d' "$(( (r<75?0:(r-35)/40)*6*6 + 
                       (g<75?0:(g-35)/40)*6   +
                       (b<75?0:(b-35)/40)     + 16 ))"
}

function printenv-heroku    # Download environment variables from Heroku
{
  heroku config -s > .env
}