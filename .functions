# Echo help options
function help {
  if [ $1 == 'help' ]; then
    echo $2
    return
  fi
}

# Start new project
function init {
  help $1 'Usage: init [node: if you want to initialize a node project]'
  git init
  if [ $1 == 'node' ]; then
    npx license $(npm get init-license) -o "$(npm get init-author-name)" > LICENSE
    npx gitignore node
    npx covgen "$(npm get init-author-email)"
    npm init -y
    npx readme-md-generator
  fi
  git add -A
  git commit -m "Initial commit"
}

# Check Ports
function listening {
  if [ $# -eq 0 ]; then
    sudo lsof -iTCP -sTCP:LISTEN -n -P
  elif [ $# -eq 1 ]; then
    sudo lsof -iTCP -sTCP:LISTEN -n -P | grep -i --color $1
  else
    echo "Usage: listening [pattern]"
  fi
}

# Reinstall node_modules
function damn {
  rm -rf node_modules
  if [ $1 == "yarn" ]; then
    yarn install
  elif [ $1 == "npm" ]; then
    npm install
  else
    echo "Usage: damn [yarn | npm]"
  fi
}

# Fix untracked files in git
function untrack {
  git rm -r --cached .
  git add .
  git commit -m "fixed untracked files"
}

# Copy shell files in this directory and replace current home shell files
function crash-bash {
  cp ./.aliases ./.bash_profile ./.bash_prompt ./.exports ./.extra ./.functions ./.path $HOME
  source $HOME/.zshrc
}

# cd to Sites directory
function sites {
  if [ $1 ]; then
    cd $HOME/$1/Sites
  else
    cd $HOME/Sites
  fi
}

# List global dependencies
function global {
  if [ $1 == 'yarn' ]; then
    yarn global list --depth=0
  elif [ $1 == 'npm' ]; then
    npm list -g --depth=0
  else
    echo 'Usage: global [yarn | npm]'
  fi
}

# Download environment variables from Heroku
function printenv-heroku {
  heroku config -s > .env
}